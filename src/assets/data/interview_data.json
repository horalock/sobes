{
    "js": [
        {
            "description": "Есть некоторая строка (var str = 'fgfggg';), что будет, если мы возьмем str[0]?",
            "answer": "<p>str[0] вернет символ строки, который находится по нулевому индексу. <br>Строка в js — immutable, то есть из нее можно прочитать символ, а вот записать нет.</p>",
            "answerCode": "",
            "author": "Без автора",
            "date": "01.01.2023",
            "difficulty": 1,
            "categories": [
                "logic",
                "string"
            ]
        },
        {
            "description": "Как можно добавить элемент в начало и в конец массива?",
            "answer": "<p>Чтобы добавить элемент в начало массива, можно использовать <span>Array.prototype.unshift()</span>. <br>Для добавления элемента в конец массива подойдет Array.prototype.push()</p>",
            "answerCode": "",
            "author": "Без автора",
            "date": "01.01.2023",
            "difficulty": 3,
            "categories": [
                "logic",
                "science",
                "math"
            ]
        },
        {
            "description": "В чем смысл оборачивания всего содержимого JavaScript-файла в функцию?",
            "answer": "<p>Этот шаблон называется IIFE - Immediately Invoked Function Expression (немедленно вызываемое функциональное выражение). </p><p>Этот подход позволяет обеспечить коду собственный блок видимости, то-есть контекст выполнения            избежать загрязнения глобальной области видимости глобальными переменными избежать неумышленного переопределения уже существующих переменных в глобальной области видимости</p>",
            "answerCode": "",
            "author": "Без автора",
            "date": "01.01.2023",
            "difficulty": 3,
            "categories": [
                "logic",
                "science",
                "math"
            ]
        },
        {
            "description": "В чем смысл и польза указания use strict в начале JavaScript-файла?",
            "answer": "<p>Команда use strict включает так называемый строгий режим. <br>В этом режиме предупреждения становятся ошибками, что помогает в написании более чистого и безопасного кода, менее уязвимого к ошибкам в продакшене.</p>",
            "answerCode": "",
            "author": "",
            "date": "01.01.2023",
            "difficulty": 3,
            "categories": [
                "logic",
                "science",
                "math"
            ]
        },
        {
            "description": "Что такое NaN? Какого типа это значение? Как можно узнать, равно ли значение переменной NaN?",
            "answer": "<p>NaN расшифровывается как `Not A Number`, это `falsey` (ложное) значение.  <br>Выражение typeof NaN возвращает тип Number. Проверить значение переменной на соответствие NaN можно, воспользовавшись встроенным методом isNaN() или используя оператор тройного равенства ===.</p>",
            "answerCode": "",
            "author": "",
            "date": "01.01.2023",
            "difficulty": 3,
            "categories": [
                "logic",
                "science",
                "math"
            ]
        },
        {
            "description": "Что такое замыкание в JavaScript? Приведите пример.",
            "answer": "<p>Замыкание в JavaScript - это комбинация функции и лексического окружения, в котором она была определена. Это позволяет ей обращаться к переменным и функциям этого лексического окружения в дальнейшем. </p><p>В следующем примере мы определяем функцию makeCounter(), которая фактически является фабричной функцией. При вызове она возвращает дочернюю функцию, которая имеет доступ к лексическому окружению внешней функции, то-есть функции makeCounter(). Таким образом, возвращаемая функция запоминает переменную counter и в последующем изменяет ее значение.</p>",
            "answerCode": "function makeCounter(initial = 0) {\n    let counter = initial;\n    return function() {\n        return counter += 1;\n    }\n}\n\nconst counterA = makeCounter(0);\nconsole.log(counterA()); // 1\nconsole.log(counterA()); // 2\n\nconst counterB = makeCounter(100);\nconsole.log(counterB()); // 101\nconsole.log(counterB()); // 102",
            "author": "",
            "date": "01.01.2023",
            "difficulty": 3,
            "categories": [
                "logic",
                "science",
                "math"
            ]
        },
        {
            "description": "Как можно клонировать объект?",
            "answer": "<p>Можно использовать оператор остатка ... (3 точки)<br>Можно использовать Object.assign(newObj, oldObj).<br>Но эти подходы не позволяют выполнить глубокое клонирование. Поэтому, если нам нужно клонировать объект со вложенными объектами, мы можем использовать либо метод какой-либо библиотеки (например lodash), либо сделать это средствами встроенного объекта JSON.</p>",
            "answerCode": "JSON.parse(JSON.stringify(objectToClone))",
            "author": "",
            "date": "01.01.2023",
            "difficulty": 3,
            "categories": [
                "logic",
                "science",
                "math"
            ]
        }
    ],
    "html": [
        {
            "description": "Почему, как правило, лучше разместить подключение CSS между тэгами <head></head>, а JS <script>-ы , перед тэгом </body>, соответственно? Знаете ли вы какие-либо исключения, приведите примеры?",
            "answer": "<p>Размещение подключения CSS между тегами <head></head> позволяет браузеру загрузить стили перед отображением содержимого страницы, что ускоряет ее отрисовку. </p><p>Размещение JS-скриптов перед тегом </body> позволяет браузеру загрузить скрипты после отображения содержимого страницы, что может ускорить время ее загрузки. </p><p>Однако есть исключения, например, если JS-скрипты используются для отрисовки содержимого страницы (например, для динамического создания элементов DOM), то их нужно размещать внутри тега <head> для корректной работы страницы.</p>",
            "answerCode": "",
            "author": "chm.org.ua",
            "date": "01.01.2023",
            "difficulty": 1,
            "categories": [
                "logic",
                "string"
            ]
        },
        {
            "description": "Какая разница между элементами div и span",
            "answer": "<p>Div — блочный элемент, а span — строчный элемент. </p><p>В соответствии с семантическими требованиями div используют для группировки контента в секции, а span — для оформления текста и изображений.</p>",
            "answerCode": "",
            "author": "Без автора",
            "date": "01.01.2023",
            "difficulty": 1,
            "categories": [
                "logic",
                "string"
            ]
        },
        {
            "description": "Что такое метатеги",
            "answer": "<p>Метатеги — это HTML-теги, которые используют, чтобы описать метаданные веб-страницы. <br>Метаданные — это данные, которые описывают другие данные, а в вебе — HTML-документы. Указывать метаданные важно, чтобы поисковики правильно отображали сайт в поисковой выдаче и он показывался на первых строчках. <br>Еще метатеги делают сайт удобнее для пользователей: позволяют быстрее понять, о чём он. </p><ul class='data-answer-list'>Есть разные виды метаданных:<li>заголовок страницы — задается тегом title;</li><li>автор и описание — тег meta с соответствующим значением свойства name;</li><li>данные для отображения превью страницы в фейсбуке* по протоколу Open Graph;</li>            <li>ссылка на favicon — иконку для отображения в закладках и во вкладке браузера: тег link;</li>            <li>ссылка на картинку для отображения в apple-устройствах — тег link со значением свойства rel apple-touch-icon-precomposed.</li>        </ul>             <p>Иногда к метаданным относят язык документа — задается как свойство lang тега html, а иногда связанные css- и js-документы — задается тегами link и script.</p>",
            "answerCode": "",
            "author": "Без автора",
            "date": "01.01.2023",
            "difficulty": 1,
            "categories": [
                "logic",
                "string"
            ]
        }
        
    ],
    "css": [
        {
            "description": "css1",
            "answer": "<p>.</p>",
            "answerCode": "",
            "author": "chm.org.ua",
            "date": "01.01.2023",
            "difficulty": 1,
            "categories": [
                "logic",
                "string"
            ]
        },
        {
            "description": "css2",
            "answer": "<p>2.</p>",
            "answerCode": "",
            "author": "Без автора",
            "date": "01.01.2023",
            "difficulty": 1,
            "categories": [
                "logic",
                "string"
            ]
        },
        {
            "description": "css3",
            "answer": "<p>3.</p>",
            "answerCode": "",
            "author": "Без автора",
            "date": "01.01.2023",
            "difficulty": 1,
            "categories": [
                "logic",
                "string"
            ]
        }
        
    ],
    "tasks": [
        {
            "description": "ta1",
            "answer": "<p>ta1.</p>",
            "answerCode": "",
            "author": "chm.org.ua",
            "date": "01.01.2023",
            "difficulty": 1,
            "categories": [
                "logic",
                "string"
            ]
        },
        {
            "description": "ta2",
            "answer": "<p>ta2.</p>",
            "answerCode": "",
            "author": "Без автора",
            "date": "01.01.2023",
            "difficulty": 1,
            "categories": [
                "logic",
                "string"
            ]
        },
        {
            "description": "ta3",
            "answer": "<p>ta3.</p>",
            "answerCode": "",
            "author": "Без автора",
            "date": "01.01.2023",
            "difficulty": 1,
            "categories": [
                "logic",
                "string"
            ]
        }
        
    ],
    "tricks": [
        {
            "description": "tr1",
            "answer": "<p>1.</p>",
            "answerCode": "",
            "author": "chm.org.ua",
            "date": "01.01.2023",
            "difficulty": 1,
            "categories": [
                "logic",
                "string"
            ]
        },
        {
            "description": "tr2",
            "answer": "<p>2.</p>",
            "answerCode": "",
            "author": "Без автора",
            "date": "01.01.2023",
            "difficulty": 1,
            "categories": [
                "logic",
                "string"
            ]
        },
        {
            "description": "tr3",
            "answer": "<p>3.</p>",
            "answerCode": "",
            "author": "Без автора",
            "date": "01.01.2023",
            "difficulty": 1,
            "categories": [
                "logic",
                "string"
            ]
        }
        
    ],
    "main": [
        {
            "description": "Описание",
            "answer": "<p>.</p>",
            "answerCode": "",
            "author": "chm.org.ua",
            "date": "01.01.2023",
            "difficulty": 1,
            "categories": [
                "logic",
                "string"
            ]
        }   
    ]
}