{
    "ex": [
        {
            "title": "JavaScript",
            "description": "Есть некоторая строка (var str = 'fgfggg';), что будет, если мы возьмем str[0]?",
            "answer": "str[0] вернет символ строки, который находится по нулевому индексу. Строка в js — immutable, то есть из нее можно прочитать символ, а вот записать нет.",
            "answerCode": "",
            "author": "Без автора",
            "date": "01.01.2023",
            "difficulty": 1,
            "categories": [
                "logic",
                "string"
            ]
        },
        {
            "title": "JavaScript",
            "description": "Как можно добавить элемент в начало и в конец массива?",
            "answer": "Чтобы добавить элемент в начало массива, можно использовать Array.prototype.unshift(). Для добавления элемента в конец массива подойдет Array.prototype.push()</p>",
            "answerCode": "",
            "author": "Без автора",
            "date": "01.01.2023",
            "difficulty": 3,
            "categories": [
                "logic",
                "science",
                "math"
            ]
        },
        {
            "title": "JavaScript",
            "description": "В чем смысл оборачивания всего содержимого JavaScript-файла в функцию?",
            "answer": "Этот шаблон называется IIFE - Immediately Invoked Function Expression (немедленно вызываемое функциональное выражение). Этот подход позволяет:\n            обеспечить коду собственный блок видимости, то-есть контекст выполнения\n            избежать загрязнения глобальной области видимости глобальными переменными\n            избежать неумышленного переопределения уже существующих переменных в глобальной области видимости",
            "answerCode": "",
            "author": "Без автора",
            "date": "01.01.2023",
            "difficulty": 3,
            "categories": [
                "logic",
                "science",
                "math"
            ]
        },
        {
            "title": "JavaScript",
            "description": "В чем смысл и польза указания use strict в начале JavaScript-файла?",
            "answer": "Команда use strict включает так называемый строгий режим. В этом режиме предупреждения становятся ошибками, что помогает в написании более чистого и безопасного кода, менее уязвимого к ошибкам в продакшене.",
            "answerCode": "",
            "author": "",
            "date": "01.01.2023",
            "difficulty": 3,
            "categories": [
                "logic",
                "science",
                "math"
            ]
        },
        {
            "title": "JavaScript",
            "description": "Что такое NaN? Какого типа это значение? Как можно узнать, равно ли значение переменной NaN?",
            "answer": "NaN расшифровывается как `Not A Number`, это `falsey` (ложное) значение.  \n          Выражение typeof NaN возвращает тип Number.   \n         Проверить значение переменной на соответствие NaN можно, воспользовавшись встроенным методом isNaN() или используя оператор тройного равенства ===.",
            "answerCode": "",
            "author": "",
            "date": "01.01.2023",
            "difficulty": 3,
            "categories": [
                "logic",
                "science",
                "math"
            ]
        },
        {
            "title": "JavaScript",
            "description": "Что такое замыкание в JavaScript? Приведите пример.",
            "answer": "Замыкание в JavaScript - это комбинация функции и лексического окружения, в котором она была определена. Это позволяет ей обращаться к переменным и функциям этого лексического окружения в дальнейшем. В следующем примере мы определяем функцию makeCounter(), которая фактически является фабричной функцией. При вызове она возвращает дочернюю функцию, которая имеет доступ к лексическому окружению внешней функции, то-есть функции makeCounter(). Таким образом, возвращаемая функция запоминает переменную counter и в последующем изменяет ее значение.",
            "answerCode": "function makeCounter(initial = 0) {\n    let counter = initial;\n    return function() {\n        return counter += 1;\n    }\n}\n\nconst counterA = makeCounter(0);\nconsole.log(counterA()); // 1\nconsole.log(counterA()); // 2\n\nconst counterB = makeCounter(100);\nconsole.log(counterB()); // 101\nconsole.log(counterB()); // 102",
            "author": "",
            "date": "01.01.2023",
            "difficulty": 3,
            "categories": [
                "logic",
                "science",
                "math"
            ]
        },
        {
            "title": "JavaScript",
            "description": "Как можно клонировать объект?",
            "answer": "Можно использовать оператор остатка ....\nМожно использовать Object.assign(newObj, oldObj).\nНо эти подходы не позволяют выполнить глубокое клонирование. Поэтому, если нам нужно клонировать объект со вложенными объектами, мы можем использовать либо метод какой-либо библиотеки (привет, lodash), либо сделать это средствами встроенного объекта JSON.",
            "answerCode": "JSON.parse(JSON.stringify(objectToClone))",
            "author": "",
            "date": "01.01.2023",
            "difficulty": 3,
            "categories": [
                "logic",
                "science",
                "math"
            ]
        }
    ]
}